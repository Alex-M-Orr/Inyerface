[{"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\index.tsx":"1","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reportWebVitals.ts":"2","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\App.tsx":"3","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Login\\Login.tsx":"4","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Register\\Register.tsx":"5","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Profile\\Profile.tsx":"6","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Timer\\Timer.tsx":"7","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reducers\\Index.ts":"8","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\ProfilePage\\ProfilePage.tsx":"9","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\LoginPage\\LoginPage.tsx":"10","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reducers\\UserReducer.ts":"11","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\actions\\UserAction.ts":"12","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Popup\\Popup.tsx":"13","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\LoginPage\\testing.tsx":"14","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Spinner\\spinner.tsx":"15","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\AssistantBox\\AssistantBox.tsx":"16","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Puzzles\\DragonPuzzle.tsx":"17","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Profile\\EditButton.tsx":"18"},{"size":567,"mtime":1607634830211,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1607529455953,"results":"21","hashOfConfig":"20"},{"size":1223,"mtime":1607634830183,"results":"22","hashOfConfig":"20"},{"size":1718,"mtime":1607635784484,"results":"23","hashOfConfig":"20"},{"size":8468,"mtime":1607634830193,"results":"24","hashOfConfig":"20"},{"size":5175,"mtime":1607637606238,"results":"25","hashOfConfig":"20"},{"size":1229,"mtime":1607529975730,"results":"26","hashOfConfig":"20"},{"size":153,"mtime":1607634830212,"results":"27","hashOfConfig":"20"},{"size":244,"mtime":1607634830205,"results":"28","hashOfConfig":"20"},{"size":566,"mtime":1607634830203,"results":"29","hashOfConfig":"20"},{"size":477,"mtime":1607634830213,"results":"30","hashOfConfig":"20"},{"size":205,"mtime":1607634830207,"results":"31","hashOfConfig":"20"},{"size":938,"mtime":1607634830191,"results":"32","hashOfConfig":"20"},{"size":515,"mtime":1607634830204,"results":"33","hashOfConfig":"20"},{"size":248,"mtime":1607634830196,"results":"34","hashOfConfig":"20"},{"size":2015,"mtime":1607634830185,"results":"35","hashOfConfig":"20"},{"size":702,"mtime":1607637606239,"results":"36","hashOfConfig":"20"},{"size":2720,"mtime":1607637606236,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"od99us",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"40"},"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\index.tsx",[],["85","86"],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reportWebVitals.ts",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\App.tsx",["87","88","89","90"],"import React from 'react';\r\nimport logo from './logo.svg';\r\nimport { Register } from './Components/Register/Register';\r\nimport { ProfileComp } from './Components/Profile/Profile';\r\nimport { Timer } from './Components/Timer/Timer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Login from './Components/Login/Login';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Login/>\r\n      <Register />\r\n      <ProfileComp/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Login\\Login.tsx",["91","92","93","94"],"import React, { useState} from 'react';\r\nimport './logincss.css';\r\nimport { Button } from 'reactstrap';\r\nimport { useSelector, useStore } from 'react-redux';\r\nimport { IUserState } from '../../reducers/UserReducer';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Login: React.FC<any> = (props:any) => {\r\n\r\n  const [enteredEmail, setEmail] = useState(\"\");\r\n  const [enteredPassword, setPassword] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  let email = useSelector((state: any) => {\r\n    return `${state.UserReducer?.email}`\r\n  });\r\n  \r\n  let password = useSelector((state: any) => {\r\n    return `${state.UserReducer?.password}`\r\n  });\r\n\r\n  const LoginHandler = async () => {\r\n    if(enteredEmail === email && enteredPassword === password && email !== ''){\r\n        history.push(\"/profile\");\r\n    }\r\n    else if(enteredEmail == \"test\" && enteredPassword == \"test\"){\r\n      history.push(\"/profile\");\r\n    }\r\n\r\n    console.log(password);\r\n    console.log(email);\r\n  }\r\n\r\n  const annoyingAlert = () => {\r\n    window.alert(\"GREAT JOB CLICKING!\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n        <div className=\"form-signin\">\r\n          <input className=\"form-control\" type=\"password\" id=\"password\" placeholder=\"Password\" \r\n          onChange={e => setPassword(e.target.value)} onClick={annoyingAlert} />\r\n          <input className=\"form-control\" id=\"username\" placeholder=\"Username\" onClick={annoyingAlert}\r\n          onChange={e => setEmail(e.target.value)} />\r\n          <div className=\"btndiv\">\r\n          <Button className=\"btn btn-lg btn-primary btn-block btnanim\" onClick={LoginHandler}>Login</Button>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Register\\Register.tsx",["95"],"import React, { useState } from \"react\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Collapse,\r\n  Button,\r\n  Label,\r\n  InputGroup,\r\n  Card,\r\n} from \"reactstrap\"; \r\nimport \"../../SCSS/register.scss\";\r\nimport { Timer } from \"../Timer/Timer\";\r\n\r\nexport const Register: React.FC<any> = (props: any) => {\r\n  const [formOpen, setFormOpen] = useState(false);\r\n  const [ toggleTimer, setToggleTimer ] = useState(false);\r\n  const [arrowDirection, setArrowDirection] = useState(45);\r\n  const [subPos,setSubPos] = useState(0);\r\n\r\n  const toggleForm = () => {\r\n    setToggleTimer(!toggleTimer);\r\n    setFormOpen(!formOpen);\r\n    changeArrowDirection();\r\n  }\r\n  const changeArrowDirection = () => {\r\n    if(formOpen){\r\n      setArrowDirection(45);\r\n    }\r\n    else{\r\n      setArrowDirection(225);\r\n    }    \r\n  }\r\n  const moveSubmit = () => {\r\n    console.log(\"on mouse enter\")\r\n    switch (subPos) {\r\n      case 0:\r\n        setSubPos(-200);\r\n        break;\r\n      case -200:\r\n        setSubPos(200);\r\n        break;\r\n      case 200:\r\n        setSubPos(-200);\r\n        break;\r\n    }\r\n  }\r\n  \r\n  function shuffle(array:any) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n\r\n  let mappedNums:any = [];\r\n  const phoneNumberOption= (() => {\r\n    let nums = [0,1,2,3,4,5,6,7,8,9];\r\n    \r\n    for(let i = 0; i<10;i++){\r\n      nums = shuffle(nums);\r\n      mappedNums.push(<select name={`digit${i}`}>{nums.map((n) => <option value={n} >{n}</option>)}</select>);\r\n    }\r\n  })();  \r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Collapse isOpen={formOpen} className=\"registerWrapper\">\r\n        <Form>\r\n          <Label>Enter your email:</Label>\r\n          <br/>\r\n          <InputGroup>\r\n          <Input name=\"emailKey\" value=\"Email\" style={{ width: \"30%\" }}>Email</Input>\r\n          <select name=\"atSymbol\"> \r\n            <option selected disabled hidden>Select the @ symbol</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"@\"> @</option>\r\n            <option value=\"WRONG\">@`</option>\r\n          </select>\r\n          <Input name=\"emailAddress\" value=\"Website.com\" style={{ width: \"30%\"}}>website</Input>\r\n          </InputGroup>\r\n          <br/>\r\n          <Label name=\"password\" value=\"password\">Password:</Label>\r\n          <br/>\r\n          <Input name=\"password\"></Input>\r\n          <br/>\r\n          <Label>Enter first and last name:</Label>\r\n          <InputGroup>\r\n            <Input name=\"firstName\" type=\"text\" value=\"First Name\"></Input>\r\n            <Input name=\"lastName\" type=\"text\" value=\"Last Name\"></Input>\r\n          </InputGroup>\r\n\r\n          <Label name=\"weight\">Weight</Label>\r\n          <Input name=\"weight\"></Input>\r\n          <Label name=\"phone\">Phone Number</Label>\r\n          <InputGroup id=\"phoneNumbers\">\r\n          { mappedNums }\r\n          </InputGroup>\r\n          <input type=\"submit\" style={{transform: `translateX(${subPos}px)`}} value=\"Submit\" id=\"registerSubmit\" onMouseEnter={ moveSubmit }></input>\r\n        </Form>\r\n        { toggleTimer ? \r\n        <Timer seconds={Math.round(Math.random()*15)} fontSize={100} triggeredFunction={toggleForm}/>\r\n        :\r\n        <span />\r\n        }\r\n      </Collapse>\r\n      <Button id=\"registerExpandButton\" onClick={toggleForm}>\r\n        <span className=\"arrow\" style={{transform: `rotate(${arrowDirection}deg)`}}></span>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Profile\\Profile.tsx",["96","97","98","99","100","101","102","103","104","105","106","107","108","109"],"import React, { useEffect, useState } from \"react\";\r\nimport { Col, Container, Row } from \"reactstrap\";\r\nimport \"../../SCSS/profile.scss\";\r\nimport { DragonPuzzle } from \"../Puzzles/DragonPuzzle\";\r\nimport { EditButton } from \"./EditButton\";\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\n/**\r\n * Displays persons profile information\r\n * \r\n * @param props N/A\r\n */\r\nexport const ProfileComp: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [ maxImgWidth, setMaxImgWidth ] = useState(60);\r\n    const [ isPuzzleSolved, setIsPuzzleSolved ] = useState(false);\r\n    const [ toggleName, setNameToggle ] = useState(false);\r\n    const [ toggleRotate, setPanelRotate ] = useState(\"rotate(90deg)\");\r\n    const [ showInfo, setShowInfo ] = useState(false);\r\n\r\n    const tempName = \"Dilly Gobbington\";\r\n    const tempBio = \"I\\'m a pretty cool guy to be frank. I don\\'t like to gloat \"+\r\n    \"normally, but honestly what choice do I have here? I\\'m tangibly, diagnosably \" +\r\n    \"perfect in every concievable way. I definitely undersold myself with my first \" +\r\n    \"sentence. Not that I\\'m capable of making mistakes of course. I\\'m so \" +\r\n    \"fucking cool that one time, my dad walked out of the ... Actually, I\\'m too \" +\r\n    \"cool to finish that story. I know you\\'ll all agree if and when you are graced \" +\r\n    \"with my presence.\";\r\n\r\n    useEffect(()=>{\r\n        if(maxImgWidth < 10)\r\n        {\r\n            setMaxImgWidth(60);\r\n        }\r\n    });\r\n\r\n    const randomPuzzle = () => {\r\n        const randNum = Math.round(Math.random()*2);\r\n            if( randNum == 0 )\r\n            {\r\n                return(  <DragonPuzzle triggeredFunction={()=>setIsPuzzleSolved(true)} /> );\r\n            }\r\n            else if( randNum == 1 )\r\n            {\r\n                return (<p>another puzzle will go here</p>);\r\n            }\r\n            else if( randNum == 2 )\r\n            {\r\n                return (<p>yet another puzzle will go here</p>);\r\n            }\r\n    }\r\n\r\n    return(\r\n        <div className=\"prof-bg\">\r\n            <div className=\"container\">\r\n            <div className=\"row justify-content-center\">\r\n                {/* Profile Image */}\r\n                <div className=\"col-3\">\r\n                    <div className=\"prof-img-container\" \r\n                    style={{transform: toggleRotate}}\r\n                    onMouseEnter={()=>setPanelRotate(\"rotate(0deg)\")}\r\n                    onMouseLeave={()=>setPanelRotate(\"rotate(90deg)\")}>\r\n                        { toggleName ? \r\n                        <p className=\"prof-name\" onMouseLeave={()=>setNameToggle(false)}\r\n                        style={{transform: \"rotate(180deg)\"}}>\r\n                            {tempName}</p> \r\n                        :\r\n                        <div className=\"black-box\"\r\n                        onMouseEnter={()=>setNameToggle(true)} />\r\n                        }\r\n                        <div className=\"row justify-content-center\">\r\n                        <img style={{maxWidth: maxImgWidth}} className=\"prof-img\"\r\n                        src=\"https://cdn.shopify.com/s/files/1/1635/2935/products/38336_large.jpg?v=1600837700\" \r\n                        alt=\"I'm not sure what this is\" \r\n                        onClick={()=>setMaxImgWidth(maxImgWidth-10)}/>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n                {/* Profile Info */}\r\n                <div className=\"col-9\">\r\n                    <div className=\"prof-info-container\"\r\n                    onMouseEnter={()=>setShowInfo(true)}\r\n                    onMouseLeave={()=>setShowInfo(false)}>\r\n                        {/* if the user has moused over the profile info comp, they will\r\n                        either see a puzzle or their user information */}\r\n                        { showInfo ?\r\n                            //if the info box is opened, we determine if the puzzle has been solved\r\n                            isPuzzleSolved ? \r\n                            \r\n                                //if it has been solved, then show the user's information\r\n                                <>\r\n                                    <h3 className=\"prof-text-header\">Name:</h3>\r\n                                    <hr className=\"prof-hr\"/>\r\n                                    <EditButton buttonName=\"Name\" text={tempName}/>\r\n                                    <br/>\r\n                            \r\n                                    <h3 className=\"prof-text-header\">Bio:</h3>\r\n                                    <hr className=\"prof-hr\"/>\r\n                                    <EditButton buttonName=\"Bio\" text={tempBio}/>\r\n                                </>\r\n                            \r\n                                :\r\n\r\n                                //if not, you better be ready to solve one of the puzzles\r\n                                randomPuzzle() //renders a random puzzle component\r\n                            \r\n                            :\r\n                            <span/>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Timer\\Timer.tsx",["110"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../../SCSS/timer.scss\";\r\n\r\ninterface IProps {\r\n    seconds: number,\r\n    fontSize: number,\r\n    triggeredFunction?: Function,\r\n}\r\n\r\n/**\r\n * A component which simply displays a counter, counting down from a \r\n * given seconds value.\r\n * \r\n * @param props the seconds that the timer starts with, font size of \r\n * the time text, and the function that you want to execute once the \r\n * timer hits 0.\r\n */\r\nexport const Timer: React.FC<IProps> = (props:IProps) => {\r\n    \r\n    const [seconds, setSeconds] = useState(props.seconds);\r\n\r\n    //Triggers everytime the state changes\r\n    useEffect(() => {\r\n        if(seconds > 0 )\r\n        {\r\n            setTimeout(()=>setSeconds(seconds - 1), 1000);\r\n        }\r\n        else\r\n        {\r\n            reachedCountdown();\r\n        }\r\n    });\r\n\r\n    const reachedCountdown = () => {\r\n        if(props.triggeredFunction !== undefined)\r\n        {\r\n            props.triggeredFunction();\r\n        }\r\n        else\r\n        {\r\n            setSeconds(props.seconds);\r\n        }    \r\n    }\r\n\r\n    return(\r\n            <p id=\"time\" style={{fontSize: props.fontSize}} \r\n            key={Math.random()}>{ seconds }</p>\r\n    ); \r\n}",["111","112"],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reducers\\Index.ts",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\ProfilePage\\ProfilePage.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\LoginPage\\LoginPage.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reducers\\UserReducer.ts",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\actions\\UserAction.ts",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Popup\\Popup.tsx",["113","114"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { unmountComponentAtNode } from \"react-dom\";\r\nimport \"../../SCSS/popup.scss\";\r\n\r\ninterface IPopupProps {\r\n    buttonClick: () => void,\r\n    isPopped: boolean\r\n}\r\n\r\nexport const Popup: React.FC<any> = (props: any) => {\r\n\r\n    const [popupDiplay, setPopupDisplay] = useState(\"block\");\r\n    \r\n\r\n    const clicked=()=>{\r\n        console.log(\"clicked\");\r\n        setPopupDisplay(\"none\");\r\n    }\r\n  return (\r\n      <div id=\"popupWrapper\" style={{display: `${popupDiplay}`}}>\r\n        <div id=\"popupWindow\">\r\n            <h1>ATTENTION!!!</h1>\r\n          Please close out of this pop up :)\r\n          \r\n          <p style={{marginTop: \"100px\"}}>Unfortunately for you the close button is shy :(</p>\r\n        </div>\r\n        <button id=\"popupButton\" style={{left: `${(Math.random()*95)}%`, top: `${(Math.random()*95)}%`}} onClick={ clicked }>X</button>\r\n      </div>\r\n  );\r\n};\r\n","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\LoginPage\\testing.tsx",["115","116","117"],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport { unmountComponentAtNode } from 'react-dom';\r\nimport Login from '../../Components/Login/Login';\r\nimport { Popup } from '../../Components/Popup/Popup';\r\nimport { Register } from '../../Components/Register/Register';\r\n\r\nexport const Testing: React.FC<any> = (props:any) => {\r\n    const  [isPopped, setPopped] = useState(true);\r\n\r\n    return (\r\n        <>\r\n            <Popup/>\r\n            <Login/>\r\n            <Register/>\r\n        </>\r\n    );\r\n}","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Spinner\\spinner.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\AssistantBox\\AssistantBox.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Puzzles\\DragonPuzzle.tsx",["118"],"import React, { useState } from \"react\";\r\nimport \"../../SCSS/dragon-puz.scss\";\r\n\r\ninterface IProps {\r\n    triggeredFunction: Function,\r\n}\r\n\r\nexport const DragonPuzzle: React.FC<IProps> = (props:IProps) => {\r\n    \r\n    let XPos = Math.random()*100;\r\n    let YPos = Math.random()*100;\r\n\r\n    const hurtDragon = () => {\r\n        props.triggeredFunction();\r\n    }\r\n\r\n    return(\r\n        <div style={{height: 300}}>\r\n            <h3>Slay the dragon to see your profile info: </h3>\r\n            <button onClick={hurtDragon} style={{\r\n                transform: `translate(${XPos}px,${YPos}px)`,\r\n            }} className=\"inv-btn\"><img src=\"\" alt=\"click to slay dragon\" /></button>\r\n        </div>\r\n    )\r\n}","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Profile\\EditButton.tsx",["119","120","121","122"],"import React, { SyntheticEvent, useEffect, useState } from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"../../SCSS/edit-btn.scss\";\r\n\r\ninterface IProps {\r\n    buttonName: string,\r\n    text: string,\r\n}\r\n\r\nexport const EditButton: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [showTextBox, setShowBox] = useState(false);\r\n    const [XPos, setXPos] = useState(Math.random()*props.text.length);\r\n    const [YPos, setYPos] = useState(Math.random()*(props.text.length/4));\r\n    const [colors, setColors] = useState([\"white\", \"#332e2e\", \"#d55e53\"]);\r\n\r\n    const editText = (event:SyntheticEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n\r\n        const newText = event.currentTarget[\"text\"].value;\r\n\r\n        //replace old text with this new text value\r\n        console.log(newText);\r\n    }\r\n\r\n    const toggleColors = () => {\r\n        if(colors[0] === \"white\")\r\n        {\r\n            setColors([\"#00000000\", \"#00000000\", \"#00000000\"]);\r\n        }\r\n        else\r\n        {\r\n            setColors([\"white\", \"#332e2e\", \"#d55e53\"]);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {/* Button underneeth text */}\r\n            <button style={{\r\n                transform: `translate(${XPos}px,${YPos}px)`,\r\n                color: colors[0],\r\n                backgroundColor: colors[2],\r\n                border: \"2px solid \" + colors[1],\r\n                display: \"inline\",\r\n                zIndex: 0,\r\n            }}\r\n            id=\"text-edit-btn\"\r\n            >Change {props.buttonName}</button>\r\n\r\n            {/* Invisible button above the text (has to be rendered before form element) */}\r\n            <button style={{\r\n                transform: `translate(${XPos}px,${YPos}px)`,\r\n                display: \"inline\",\r\n                zIndex: 2,\r\n            }} \r\n            id=\"inv-edit-btn\"\r\n            onClick={()=>setShowBox(!showTextBox)}\r\n            onMouseEnter={toggleColors}\r\n            onMouseLeave={toggleColors}>Change {props.buttonName}</button>\r\n\r\n            {/* Either the edit text box and submit button or plain text */}\r\n            {showTextBox ? \r\n            <form onSubmit={editText} id=\"\">\r\n\r\n                <div className=\"row\">\r\n                    <input type=\"textarea\" className=\"text-area\" name=\"text\" \r\n                    size={props.text.length} placeholder={props.text}/>\r\n                </div>\r\n                \r\n                <div className=\"row\">\r\n                    <input type=\"submit\" className=\"submit-btn\" \r\n                    value=\"Change the text to the new text\"/>\r\n                </div>\r\n\r\n            </form>\r\n            :\r\n            <p className=\"text-wiggle\">{props.text}</p>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":2,"column":8,"nodeType":"129","messageId":"130","endLine":2,"endColumn":12},{"ruleId":"127","severity":1,"message":"131","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":18},{"ruleId":"127","severity":1,"message":"132","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":15},{"ruleId":"127","severity":1,"message":"133","line":6,"column":50,"nodeType":"129","messageId":"130","endLine":6,"endColumn":54},{"ruleId":"127","severity":1,"message":"134","line":4,"column":23,"nodeType":"129","messageId":"130","endLine":4,"endColumn":31},{"ruleId":"127","severity":1,"message":"135","line":5,"column":10,"nodeType":"129","messageId":"130","endLine":5,"endColumn":20},{"ruleId":"136","severity":1,"message":"137","line":26,"column":26,"nodeType":"138","messageId":"139","endLine":26,"endColumn":28},{"ruleId":"136","severity":1,"message":"137","line":26,"column":55,"nodeType":"138","messageId":"139","endLine":26,"endColumn":57},{"ruleId":"127","severity":1,"message":"140","line":113,"column":9,"nodeType":"129","messageId":"130","endLine":113,"endColumn":26},{"ruleId":"127","severity":1,"message":"141","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":13},{"ruleId":"127","severity":1,"message":"142","line":2,"column":15,"nodeType":"129","messageId":"130","endLine":2,"endColumn":24},{"ruleId":"127","severity":1,"message":"143","line":2,"column":26,"nodeType":"129","messageId":"130","endLine":2,"endColumn":29},{"ruleId":"144","severity":1,"message":"145","line":25,"column":23,"nodeType":"146","messageId":"147","endLine":25,"endColumn":24,"suggestions":"148"},{"ruleId":"144","severity":1,"message":"145","line":25,"column":63,"nodeType":"146","messageId":"147","endLine":25,"endColumn":64,"suggestions":"149"},{"ruleId":"144","severity":1,"message":"145","line":26,"column":58,"nodeType":"146","messageId":"147","endLine":26,"endColumn":59,"suggestions":"150"},{"ruleId":"144","severity":1,"message":"145","line":28,"column":26,"nodeType":"146","messageId":"147","endLine":28,"endColumn":27,"suggestions":"151"},{"ruleId":"144","severity":1,"message":"145","line":28,"column":69,"nodeType":"146","messageId":"147","endLine":28,"endColumn":70,"suggestions":"152"},{"ruleId":"144","severity":1,"message":"145","line":29,"column":74,"nodeType":"146","messageId":"147","endLine":29,"endColumn":75,"suggestions":"153"},{"ruleId":"144","severity":1,"message":"145","line":30,"column":43,"nodeType":"146","messageId":"147","endLine":30,"endColumn":44,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":33,"column":5,"nodeType":"129","endLine":33,"endColumn":14,"suggestions":"157"},{"ruleId":"136","severity":1,"message":"137","line":42,"column":25,"nodeType":"138","messageId":"139","endLine":42,"endColumn":27},{"ruleId":"136","severity":1,"message":"137","line":46,"column":30,"nodeType":"138","messageId":"139","endLine":46,"endColumn":32},{"ruleId":"136","severity":1,"message":"137","line":50,"column":30,"nodeType":"138","messageId":"139","endLine":50,"endColumn":32},{"ruleId":"127","severity":1,"message":"158","line":1,"column":28,"nodeType":"129","messageId":"130","endLine":1,"endColumn":34},{"ruleId":"123","replacedBy":"159"},{"ruleId":"125","replacedBy":"160"},{"ruleId":"127","severity":1,"message":"161","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":32},{"ruleId":"127","severity":1,"message":"162","line":6,"column":11,"nodeType":"129","messageId":"130","endLine":6,"endColumn":22},{"ruleId":"127","severity":1,"message":"161","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":32},{"ruleId":"127","severity":1,"message":"163","line":9,"column":13,"nodeType":"129","messageId":"130","endLine":9,"endColumn":21},{"ruleId":"127","severity":1,"message":"164","line":9,"column":23,"nodeType":"129","messageId":"130","endLine":9,"endColumn":32},{"ruleId":"127","severity":1,"message":"165","line":1,"column":17,"nodeType":"129","messageId":"130","endLine":1,"endColumn":25},{"ruleId":"127","severity":1,"message":"166","line":1,"column":33,"nodeType":"129","messageId":"130","endLine":1,"endColumn":42},{"ruleId":"127","severity":1,"message":"167","line":2,"column":8,"nodeType":"129","messageId":"130","endLine":2,"endColumn":9},{"ruleId":"127","severity":1,"message":"168","line":13,"column":18,"nodeType":"129","messageId":"130","endLine":13,"endColumn":25},{"ruleId":"127","severity":1,"message":"169","line":14,"column":18,"nodeType":"129","messageId":"130","endLine":14,"endColumn":25},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Register' is defined but never used.","'Timer' is defined but never used.","'Link' is defined but never used.","'useStore' is defined but never used.","'IUserState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'phoneNumberOption' is assigned a value but never used.","'Col' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","no-useless-escape","Unnecessary escape character: \\'.","Literal","unnecessaryEscape",["172","173"],["174","175"],["176","177"],["178","179"],["180","181"],["182","183"],["184","185"],"react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setMaxImgWidth'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [maxImgWidth] as a second argument to the useEffect Hook.",["186"],"'useRef' is defined but never used.",["170"],["171"],"'unmountComponentAtNode' is defined but never used.","'IPopupProps' is defined but never used.","'isPopped' is assigned a value but never used.","'setPopped' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'$' is defined but never used.","'setXPos' is assigned a value but never used.","'setYPos' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"187","fix":"188","desc":"189"},{"messageId":"190","fix":"191","desc":"192"},{"messageId":"187","fix":"193","desc":"189"},{"messageId":"190","fix":"194","desc":"192"},{"messageId":"187","fix":"195","desc":"189"},{"messageId":"190","fix":"196","desc":"192"},{"messageId":"187","fix":"197","desc":"189"},{"messageId":"190","fix":"198","desc":"192"},{"messageId":"187","fix":"199","desc":"189"},{"messageId":"190","fix":"200","desc":"192"},{"messageId":"187","fix":"201","desc":"189"},{"messageId":"190","fix":"202","desc":"192"},{"messageId":"187","fix":"203","desc":"189"},{"messageId":"190","fix":"204","desc":"192"},{"desc":"205","fix":"206"},"removeEscape",{"range":"207","text":"208"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"209","text":"210"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"211","text":"208"},{"range":"212","text":"210"},{"range":"213","text":"208"},{"range":"214","text":"210"},{"range":"215","text":"208"},{"range":"216","text":"210"},{"range":"217","text":"208"},{"range":"218","text":"210"},{"range":"219","text":"208"},{"range":"220","text":"210"},{"range":"221","text":"208"},{"range":"222","text":"210"},"Add dependencies array: [maxImgWidth]",{"range":"223","text":"224"},[796,797],"",[796,796],"\\",[836,837],[836,836],[915,916],[915,915],[1059,1060],[1059,1059],[1102,1103],[1102,1102],[1187,1188],[1187,1187],[1242,1243],[1242,1242],[1428,1428],", [maxImgWidth]"]