[{"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\index.tsx":"1","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reportWebVitals.ts":"2","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\App.tsx":"3","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reducers\\Index.ts":"4","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\LoginPage\\LoginPage.tsx":"5","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\ProfilePage\\ProfilePage.tsx":"6","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\SettingsPage\\SettingsPage.tsx":"7","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reducers\\UserReducer.ts":"8","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Popup\\Popup.tsx":"9","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Spinner\\spinner.tsx":"10","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Login\\Login.tsx":"11","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\AssistantBox\\AssistantBox.tsx":"12","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Register\\Register.tsx":"13","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Profile\\Profile.tsx":"14","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\actions\\UserAction.ts":"15","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Timer\\Timer.tsx":"16","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Profile\\EditButton.tsx":"17","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Puzzles\\DragonPuzzle.tsx":"18"},{"size":567,"mtime":1607634830211,"results":"19","hashOfConfig":"20"},{"size":440,"mtime":1607529455953,"results":"21","hashOfConfig":"20"},{"size":1239,"mtime":1607702400453,"results":"22","hashOfConfig":"20"},{"size":153,"mtime":1607634830212,"results":"23","hashOfConfig":"20"},{"size":566,"mtime":1607634830203,"results":"24","hashOfConfig":"20"},{"size":240,"mtime":1607702153111,"results":"25","hashOfConfig":"20"},{"size":805,"mtime":1607701293965,"results":"26","hashOfConfig":"20"},{"size":477,"mtime":1607634830213,"results":"27","hashOfConfig":"20"},{"size":938,"mtime":1607634830191,"results":"28","hashOfConfig":"20"},{"size":248,"mtime":1607634830196,"results":"29","hashOfConfig":"20"},{"size":1718,"mtime":1607635784484,"results":"30","hashOfConfig":"20"},{"size":2015,"mtime":1607634830185,"results":"31","hashOfConfig":"20"},{"size":8466,"mtime":1607701714373,"results":"32","hashOfConfig":"20"},{"size":6072,"mtime":1607702466677,"results":"33","hashOfConfig":"20"},{"size":205,"mtime":1607634830207,"results":"34","hashOfConfig":"20"},{"size":1229,"mtime":1607529975730,"results":"35","hashOfConfig":"20"},{"size":3243,"mtime":1607702092143,"results":"36","hashOfConfig":"20"},{"size":725,"mtime":1607702092145,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"od99us",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\index.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reportWebVitals.ts",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\App.tsx",["81","82","83","84"],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reducers\\Index.ts",[],["85","86"],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\LoginPage\\LoginPage.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\ProfilePage\\ProfilePage.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Views\\SettingsPage\\SettingsPage.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\reducers\\UserReducer.ts",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Popup\\Popup.tsx",["87","88"],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { unmountComponentAtNode } from \"react-dom\";\r\nimport \"../../SCSS/popup.scss\";\r\n\r\ninterface IPopupProps {\r\n    buttonClick: () => void,\r\n    isPopped: boolean\r\n}\r\n\r\nexport const Popup: React.FC<any> = (props: any) => {\r\n\r\n    const [popupDiplay, setPopupDisplay] = useState(\"block\");\r\n    \r\n\r\n    const clicked=()=>{\r\n        console.log(\"clicked\");\r\n        setPopupDisplay(\"none\");\r\n    }\r\n  return (\r\n      <div id=\"popupWrapper\" style={{display: `${popupDiplay}`}}>\r\n        <div id=\"popupWindow\">\r\n            <h1>ATTENTION!!!</h1>\r\n          Please close out of this pop up :)\r\n          \r\n          <p style={{marginTop: \"100px\"}}>Unfortunately for you the close button is shy :(</p>\r\n        </div>\r\n        <button id=\"popupButton\" style={{left: `${(Math.random()*95)}%`, top: `${(Math.random()*95)}%`}} onClick={ clicked }>X</button>\r\n      </div>\r\n  );\r\n};\r\n","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Spinner\\spinner.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Login\\Login.tsx",["89","90","91","92"],"import React, { useState} from 'react';\r\nimport './logincss.css';\r\nimport { Button } from 'reactstrap';\r\nimport { useSelector, useStore } from 'react-redux';\r\nimport { IUserState } from '../../reducers/UserReducer';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Login: React.FC<any> = (props:any) => {\r\n\r\n  const [enteredEmail, setEmail] = useState(\"\");\r\n  const [enteredPassword, setPassword] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  let email = useSelector((state: any) => {\r\n    return `${state.UserReducer?.email}`\r\n  });\r\n  \r\n  let password = useSelector((state: any) => {\r\n    return `${state.UserReducer?.password}`\r\n  });\r\n\r\n  const LoginHandler = async () => {\r\n    if(enteredEmail === email && enteredPassword === password && email !== ''){\r\n        history.push(\"/profile\");\r\n    }\r\n    else if(enteredEmail == \"test\" && enteredPassword == \"test\"){\r\n      history.push(\"/profile\");\r\n    }\r\n\r\n    console.log(password);\r\n    console.log(email);\r\n  }\r\n\r\n  const annoyingAlert = () => {\r\n    window.alert(\"GREAT JOB CLICKING!\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n        <div className=\"form-signin\">\r\n          <input className=\"form-control\" type=\"password\" id=\"password\" placeholder=\"Password\" \r\n          onChange={e => setPassword(e.target.value)} onClick={annoyingAlert} />\r\n          <input className=\"form-control\" id=\"username\" placeholder=\"Username\" onClick={annoyingAlert}\r\n          onChange={e => setEmail(e.target.value)} />\r\n          <div className=\"btndiv\">\r\n          <Button className=\"btn btn-lg btn-primary btn-block btnanim\" onClick={LoginHandler}>Login</Button>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\AssistantBox\\AssistantBox.tsx",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Register\\Register.tsx",["93"],"import React, { useState } from \"react\";\r\nimport {\r\n  Form,\r\n  Input,\r\n  Collapse,\r\n  Button,\r\n  Label,\r\n  InputGroup,\r\n} from \"reactstrap\"; \r\nimport \"../../SCSS/register.scss\";\r\nimport { Timer } from \"../Timer/Timer\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { IUserState } from \"../../reducers/UserReducer\";\r\nimport { setUserStore } from \"../../actions/UserAction\";\r\n\r\nlet counter =0;\r\nlet mappedNums:any = [];\r\n\r\nexport const Register: React.FC<any> = (props: any) => {\r\n\r\n  const [formOpen, setFormOpen] = useState(false);\r\n  const [ toggleTimer, setToggleTimer ] = useState(false);\r\n  const [arrowDirection, setArrowDirection] = useState(180);\r\n  const [buttonRadius, setButtonRadius] = useState(15);\r\n  const [buttonTransition, setButtonTransition] = useState(.7);\r\n  const [subPos,setSubPos] = useState(0);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const registerFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    console.log(\"IN REGISTERFORMSUBMIT\");\r\n    \r\n    let email = event.currentTarget[\"emailKey\"].value + event.currentTarget[\"atSymbol\"].value + event.currentTarget[\"emailAddress\"].value;\r\n    let password = event.currentTarget[\"password\"].value;\r\n    let name = event.currentTarget[\"firstName\"].value + \" \" + event.currentTarget[\"lastName\"].value;\r\n    let weight = event.currentTarget[\"weight\"].value; \r\n    let phone = event.currentTarget[\"digit0\"].value + event.currentTarget[\"digit1\"].value + event.currentTarget[\"digit2\"].value + event.currentTarget[\"digit3\"].value +\r\n    event.currentTarget[\"digit4\"].value + event.currentTarget[\"digit5\"].value + event.currentTarget[\"digit6\"].value + event.currentTarget[\"digit7\"].value + event.currentTarget[\"digit8\"].value +\r\n    event.currentTarget[\"digit9\"].value;\r\n  \r\n    const user: IUserState = {\r\n      email: email,\r\n      password: password,\r\n      name: name,\r\n      weight: weight,\r\n      phone: phone,\r\n    }\r\n    console.log(user);\r\n  \r\n    dispatch(setUserStore(user));\r\n    console.log(\"PAST DISPATCH\");\r\n    toggleForm();\r\n  }\r\n\r\n  const toggleForm = () => {\r\n    setToggleTimer(!toggleTimer);\r\n    setFormOpen(!formOpen);\r\n    changeArrowDirection();\r\n    changeButtonStyle();\r\n  }\r\n  const changeArrowDirection = () => {\r\n    if(formOpen){\r\n      setArrowDirection(180);\r\n    }\r\n    else{\r\n      setArrowDirection(90);\r\n    }    \r\n  }\r\n  const changeButtonStyle = () => {\r\n    if(formOpen){\r\n      setButtonTransition(.7);\r\n      setButtonRadius(10);\r\n    }\r\n    else{\r\n      setButtonTransition(.08);\r\n      setButtonRadius(0);\r\n    }\r\n  }\r\n  const moveSubmit = () => {\r\n    console.log(\"on mouse enter\")\r\n    switch (subPos) {\r\n      case 0:\r\n        setSubPos(-200);\r\n        break;\r\n      case -200:\r\n        setSubPos(200);\r\n        break;\r\n      case 200:\r\n        setSubPos(-200);\r\n        break;\r\n    }\r\n  }\r\n  \r\n  function shuffle(array:any) {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n  \r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n  \r\n    return array;\r\n  }\r\n  const phoneNumberOption= (() => {\r\n    let nums = [0,1,2,3,4,5,6,7,8,9];\r\n    if(counter === 0){\r\n    for(let i = 0; i<10;i++){\r\n      nums = shuffle(nums);\r\n      mappedNums.push(<select name={`digit${i}`}>{nums.map((n) => <option value={n} >{n}</option>)}</select>);\r\n    }\r\n    counter++;\r\n  }\r\n  })();  \r\n  const annoyingAlert = () => {\r\n    window.alert(\"GREAT JOB CLICKING!\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Collapse isOpen={formOpen} className=\"registerWrapper\">\r\n        <Form onSubmit={(event: React.FormEvent<HTMLFormElement>) => registerFormSubmit(event)} style={{marginBottom: \"50px\"}}>\r\n          <Label>Enter your email:</Label>\r\n          <br/>\r\n          <InputGroup>\r\n          <Input name=\"emailKey\" defaultValue=\"Email\" style={{ width: \"30%\" }} onFocus={annoyingAlert}></Input>\r\n          <select name=\"atSymbol\"> \r\n            <option selected disabled hidden>Select the @ symbol</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"@\"> @</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">.@</option>\r\n            <option value=\"WRONG\">@?</option>\r\n            <option value=\"WRONG\">@`</option>\r\n            <option value=\"WRONG\">!@</option>\r\n            <option value=\"WRONG\">!@</option>\r\n          </select>\r\n          <Input name=\"emailAddress\" defaultValue=\"Website.com\" style={{ width: \"30%\"}} onFocus={annoyingAlert}></Input>\r\n          </InputGroup>\r\n          <br/>\r\n          <Label name=\"password\" value=\"password\" onClick={annoyingAlert}>Password:</Label>\r\n          <br/>\r\n          <Input name=\"password\" onClick={annoyingAlert}></Input>\r\n          <br/>\r\n          <Label>Enter first and last name:</Label>\r\n          <InputGroup>\r\n            <Input name=\"firstName\" type=\"text\" defaultValue=\"First Name\" onFocus={annoyingAlert}></Input>\r\n            <Input name=\"lastName\" type=\"text\" defaultValue=\"Last Name\" onFocus={annoyingAlert}></Input>\r\n          </InputGroup>\r\n\r\n          <Label name=\"weight\">Weight</Label>\r\n          <Input name=\"weight\" onFocus={annoyingAlert}></Input>\r\n          <Label name=\"phone\">Phone Number</Label>\r\n          <InputGroup id=\"phoneNumbers\">\r\n          { mappedNums }\r\n          </InputGroup>\r\n          <input type=\"submit\" style={{transform: `translateX(${subPos}px)`}} value=\"Submit\" id=\"registerSubmit\" onMouseEnter={ moveSubmit }></input>\r\n        </Form>\r\n        { toggleTimer ? \r\n        <Timer seconds={Math.round(Math.random()*60)} fontSize={100} triggeredFunction={toggleForm}/>\r\n        :\r\n        <span />\r\n        }\r\n      </Collapse>\r\n      <Button id=\"registerExpandButton\" style={{ borderRadius: `${buttonRadius}px ${buttonRadius}px 0 0`, transition:`${buttonTransition}s linear` }} onClick={toggleForm}>\r\n        <span className=\"arrow\" style={{transform: `rotate(${arrowDirection}deg)`}}></span>\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Profile\\Profile.tsx",["94","95","96","97"],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\actions\\UserAction.ts",[],"D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Timer\\Timer.tsx",["98"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport \"../../SCSS/timer.scss\";\r\n\r\ninterface IProps {\r\n    seconds: number,\r\n    fontSize: number,\r\n    triggeredFunction?: Function,\r\n}\r\n\r\n/**\r\n * A component which simply displays a counter, counting down from a \r\n * given seconds value.\r\n * \r\n * @param props the seconds that the timer starts with, font size of \r\n * the time text, and the function that you want to execute once the \r\n * timer hits 0.\r\n */\r\nexport const Timer: React.FC<IProps> = (props:IProps) => {\r\n    \r\n    const [seconds, setSeconds] = useState(props.seconds);\r\n\r\n    //Triggers everytime the state changes\r\n    useEffect(() => {\r\n        if(seconds > 0 )\r\n        {\r\n            setTimeout(()=>setSeconds(seconds - 1), 1000);\r\n        }\r\n        else\r\n        {\r\n            reachedCountdown();\r\n        }\r\n    });\r\n\r\n    const reachedCountdown = () => {\r\n        if(props.triggeredFunction !== undefined)\r\n        {\r\n            props.triggeredFunction();\r\n        }\r\n        else\r\n        {\r\n            setSeconds(props.seconds);\r\n        }    \r\n    }\r\n\r\n    return(\r\n            <p id=\"time\" style={{fontSize: props.fontSize}} \r\n            key={Math.random()}>{ seconds }</p>\r\n    ); \r\n}","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Profile\\EditButton.tsx",["99","100","101","102"],"import React, { SyntheticEvent, useEffect, useState } from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"../../SCSS/edit-btn.scss\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setUserStore } from \"../../actions/UserAction\";\r\nimport { IUserState } from \"../../reducers/UserReducer\";\r\n\r\ninterface IProps {\r\n    buttonName: string,\r\n    text: string,\r\n}\r\n\r\nexport const EditButton: React.FC<IProps> = (props:IProps) => {\r\n\r\n    const [showTextBox, setShowBox] = useState(false);\r\n    const [XPos, setXPos] = useState(Math.random()*props.text.length);\r\n    const [YPos, setYPos] = useState(Math.random()*(props.text.length/4));\r\n    const [colors, setColors] = useState([\"white\", \"#332e2e\", \"#d55e53\"]);\r\n    const dispatch = useDispatch();\r\n    \r\n    const editText = (event:SyntheticEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n\r\n        const newText = event.currentTarget[\"text\"].value;\r\n\r\n        if(props.buttonName.toLowerCase() == \"name\")\r\n        {\r\n            const user:IUserState = {\r\n                email: \"bye bye email\",\r\n                password: \"bye bye password\",\r\n                name: newText,\r\n                weight: -69,\r\n                phone: -69\r\n            }\r\n\r\n            dispatch(setUserStore(user));\r\n        }\r\n        \r\n\r\n        \r\n        console.log(newText);\r\n    }\r\n\r\n    const toggleColors = () => {\r\n        if(colors[0] === \"white\")\r\n        {\r\n            setColors([\"#00000000\", \"#00000000\", \"#00000000\"]);\r\n        }\r\n        else\r\n        {\r\n            setColors([\"white\", \"#332e2e\", \"#d55e53\"]);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {/* Button underneeth text */}\r\n            <button style={{\r\n                transform: `translate(${XPos}px,${YPos}px)`,\r\n                color: colors[0],\r\n                backgroundColor: colors[2],\r\n                border: \"2px solid \" + colors[1],\r\n                display: \"inline\",\r\n                zIndex: 0,\r\n            }}\r\n            id=\"text-edit-btn\"\r\n            >Change {props.buttonName}</button>\r\n\r\n            {/* Invisible button above the text (has to be rendered before form element) */}\r\n            <button style={{\r\n                transform: `translate(${XPos}px,${YPos}px)`,\r\n                display: \"inline\",\r\n                zIndex: 2,\r\n            }} \r\n            id=\"inv-edit-btn\"\r\n            onClick={()=>setShowBox(!showTextBox)}\r\n            onMouseEnter={toggleColors}\r\n            onMouseLeave={toggleColors}>Change {props.buttonName}</button>\r\n\r\n            {/* Either the edit text box and submit button or plain text */}\r\n            {showTextBox ? \r\n            <form onSubmit={editText} id=\"\">\r\n\r\n                <div className=\"row\">\r\n                    <input type=\"textarea\" className=\"text-area\" name=\"text\" \r\n                    size={props.text.length} placeholder={props.text}/>\r\n                </div>\r\n                \r\n                <div className=\"row\">\r\n                    <input type=\"submit\" className=\"submit-btn\" \r\n                    value=\"Change the text to the new text\"/>\r\n                </div>\r\n\r\n            </form>\r\n            :\r\n            <p className=\"text-wiggle\">{props.text}</p>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}","D:\\StagingProjects\\Inyerface2\\Inyerface\\src\\Components\\Puzzles\\DragonPuzzle.tsx",["103"],"import React, { useState } from \"react\";\r\nimport \"../../SCSS/dragon-puz.scss\";\r\n\r\ninterface IProps {\r\n    triggeredFunction: Function,\r\n}\r\n\r\nexport const DragonPuzzle: React.FC<IProps> = (props:IProps) => {\r\n    \r\n    let XPos = Math.random()*100;\r\n    let YPos = Math.random()*100;\r\n\r\n    const hurtDragon = () => {\r\n        props.triggeredFunction();\r\n    }\r\n\r\n    return(\r\n        <div style={{height: 300}}>\r\n            <h3 className=\"header-text\">Slay the dragon to see your profile info:</h3>\r\n            <button onClick={hurtDragon} style={{\r\n                transform: `translate(${XPos}px,${YPos}px)`,\r\n            }} className=\"inv-btn\"><img src=\"\" alt=\"click to slay dragon\" /></button>\r\n        </div>\r\n    )\r\n}",{"ruleId":"104","severity":1,"message":"105","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":12},{"ruleId":"104","severity":1,"message":"108","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":18},{"ruleId":"104","severity":1,"message":"109","line":4,"column":10,"nodeType":"106","messageId":"107","endLine":4,"endColumn":15},{"ruleId":"104","severity":1,"message":"110","line":6,"column":50,"nodeType":"106","messageId":"107","endLine":6,"endColumn":54},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"104","severity":1,"message":"115","line":3,"column":10,"nodeType":"106","messageId":"107","endLine":3,"endColumn":32},{"ruleId":"104","severity":1,"message":"116","line":6,"column":11,"nodeType":"106","messageId":"107","endLine":6,"endColumn":22},{"ruleId":"104","severity":1,"message":"117","line":4,"column":23,"nodeType":"106","messageId":"107","endLine":4,"endColumn":31},{"ruleId":"104","severity":1,"message":"118","line":5,"column":10,"nodeType":"106","messageId":"107","endLine":5,"endColumn":20},{"ruleId":"119","severity":1,"message":"120","line":26,"column":26,"nodeType":"121","messageId":"122","endLine":26,"endColumn":28},{"ruleId":"119","severity":1,"message":"120","line":26,"column":55,"nodeType":"121","messageId":"122","endLine":26,"endColumn":57},{"ruleId":"104","severity":1,"message":"123","line":113,"column":9,"nodeType":"106","messageId":"107","endLine":113,"endColumn":26},{"ruleId":"124","severity":1,"message":"125","line":31,"column":5,"nodeType":"106","endLine":31,"endColumn":14,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"120","line":41,"column":25,"nodeType":"121","messageId":"122","endLine":41,"endColumn":27},{"ruleId":"119","severity":1,"message":"120","line":45,"column":30,"nodeType":"121","messageId":"122","endLine":45,"endColumn":32},{"ruleId":"119","severity":1,"message":"120","line":49,"column":30,"nodeType":"121","messageId":"122","endLine":49,"endColumn":32},{"ruleId":"104","severity":1,"message":"127","line":1,"column":28,"nodeType":"106","messageId":"107","endLine":1,"endColumn":34},{"ruleId":"104","severity":1,"message":"128","line":1,"column":33,"nodeType":"106","messageId":"107","endLine":1,"endColumn":42},{"ruleId":"104","severity":1,"message":"129","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":9},{"ruleId":"104","severity":1,"message":"130","line":13,"column":18,"nodeType":"106","messageId":"107","endLine":13,"endColumn":25},{"ruleId":"104","severity":1,"message":"131","line":14,"column":18,"nodeType":"106","messageId":"107","endLine":14,"endColumn":25},{"ruleId":"104","severity":1,"message":"132","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Register' is defined but never used.","'Timer' is defined but never used.","'Link' is defined but never used.","no-native-reassign",["133"],"no-negated-in-lhs",["134"],"'unmountComponentAtNode' is defined but never used.","'IPopupProps' is defined but never used.","'useStore' is defined but never used.","'IUserState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'phoneNumberOption' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setMaxImgWidth'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [maxImgWidth] as a second argument to the useEffect Hook.",["135"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'$' is defined but never used.","'setXPos' is assigned a value but never used.","'setYPos' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},"Add dependencies array: [maxImgWidth]",{"range":"138","text":"139"},[1135,1135],", [maxImgWidth]"]